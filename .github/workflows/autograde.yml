name: Autograding ARM64

on:
  push:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  grade:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      RUBRICA_PROMPT: ${{ secrets.RUBRICA_PROMPT }}
      MODEL_MAIN: "gpt-5-mini"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar toolchain ARM64 + QEMU + Python
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-user \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            make \
            python3-pip
          python3 -m pip install --quiet --upgrade openai

      - name: Compilar
        run: make build

      - name: Asegurar permisos de ejecución para run_tests.sh
        run: |
          if [ -f tests/run_tests.sh ]; then
            chmod +x tests/run_tests.sh
          else
            echo "⚠️ No se encontró tests/run_tests.sh"
          fi

      - name: Ejecutar pruebas
        id: tests
        run: |
          bash tests/run_tests.sh > tests/results.txt
          echo "exitcode=$?" >> "$GITHUB_OUTPUT"

      - name: Subir artefactos (logs y binarios)
        uses: actions/upload-artifact@v4
        with:
          name: resultados-ci
          path: |
            tests/results.txt
            prog
            prog.o

      - name: Calcular puntaje simple (60/40)
        id: score
        run: |
          PASS_TESTS=0
          if [ "${{ steps.tests.outputs.exitcode }}" = "0" ]; then PASS_TESTS=1; fi
          PASS_BUILD=0
          if [ -f prog ]; then PASS_BUILD=1; fi

          SCORE=0
          if [ "$PASS_BUILD" = "1" ]; then SCORE=$((SCORE+40)); fi
          if [ "$PASS_TESTS" = "1" ]; then SCORE=$((SCORE+60)); fi

          echo "score=$SCORE" >> "$GITHUB_OUTPUT"
          {
            echo "### Resumen Autograding"
            echo "- Compilación: $([ $PASS_BUILD = 1 ] && echo ✅ || echo ❌)"
            echo "- Pruebas: $([ $PASS_TESTS = 1 ] && echo ✅ || echo ❌)"
            echo "Puntaje: $SCORE/100"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Generar feedback (GPT, español)
        if: ${{ github.event_name == 'pull_request' }}
        run: python3 scripts/feedback_runner.py

      - name: Comentar en el PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.existsSync('tests/results.txt') ? fs.readFileSync('tests/results.txt','utf8') : '(sin resultados)';
            const feedback = fs.existsSync('FEEDBACK.md') ? fs.readFileSync('FEEDBACK.md','utf8') : '(sin feedback)';
            const score = `${{ steps.score.outputs.score }}`;
            const body = [
              '## 🧪 Autograding ARM64 (QEMU)',
              '',
              `**Puntaje automático:** ${score}/100`,
              '',
              '### Resultados de pruebas',
              '```',
              results,
              '```',
              '---',
              '## 🧠 Retroalimentación (asistente docente, español)',
              feedback
            ].join('\n');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
